// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "Получение списка пользователей с помощью передачи query параметров",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Поиск пользователей с использованием фильтров и пагинации",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Количество записей на 1 странице",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя пользователя",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фамилия пользователя",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Отчество пользователя",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Возраст пользователя",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Пол пользователя",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Код страны пользователя",
                        "name": "country_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Поле для сортировки",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Направление сортировки ASC, DESC",
                        "name": "order_dir",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ResponseDTO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "payload": {
                                            "$ref": "#/definitions/dto.ListOfUsersPayload"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            },
            "post": {
                "description": "Создание пользователя, данные будут обогащены с помощью публичных API",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Создание пользователя",
                "parameters": [
                    {
                        "description": "Имя пользователя",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Фамилия пользователя",
                        "name": "surname",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Отчество пользователя",
                        "name": "patronymic",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dto.ResponseDTO"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "payload": {
                                            "$ref": "#/definitions/dto.UserCreatePayload"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/users/{uuid}": {
            "delete": {
                "description": "Удаление пользователя по переданному ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Удаление пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID пользователя",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            },
            "patch": {
                "description": "Обновление данных пользователя (в теле запроса нет обязательных полей, но в случае передачи пустого тела запроса будет возвращен ответ с кодом 400)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновление данных пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID пользователя",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Имя пользователя",
                        "name": "name",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Фамилия пользователя",
                        "name": "surname",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Отчество пользователя",
                        "name": "patronymic",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Возраст пользователя",
                        "name": "age",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Пол пользователя",
                        "name": "gender",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Код страны пользователя",
                        "name": "country_id",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.EmptyResponseDTO": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Статус операции",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "dto.ErrorPayload": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Текст ошибки",
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponseDTO": {
            "type": "object",
            "properties": {
                "payload": {
                    "$ref": "#/definitions/dto.ErrorPayload"
                },
                "success": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "dto.ListOfUsersPayload": {
            "type": "object",
            "properties": {
                "total": {
                    "description": "Общее количество записей с переданными фильтрами",
                    "type": "integer",
                    "example": 0
                },
                "users": {
                    "description": "Список пользователей на указанной странице",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserPayload"
                    }
                }
            }
        },
        "dto.ResponseDTO": {
            "type": "object",
            "properties": {
                "payload": {
                    "description": "Полезная нагрузка"
                },
                "success": {
                    "description": "Статус операции",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "dto.UserCreatePayload": {
            "type": "object",
            "properties": {
                "uuid": {
                    "description": "ID пользователя",
                    "type": "string",
                    "example": "8d571787-9981-4add-a713-2fde6236e84b"
                }
            }
        },
        "dto.UserPayload": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Возврат пользователя",
                    "type": "integer",
                    "example": 22
                },
                "country_id": {
                    "description": "Строковый ID страны пользователя",
                    "type": "string",
                    "example": "RU"
                },
                "created_at": {
                    "description": "Строковое представление даты создания пользователя",
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "gender": {
                    "description": "Пол пользователя",
                    "type": "string",
                    "example": "male"
                },
                "name": {
                    "description": "Имя пользователя",
                    "type": "string",
                    "example": "Dmitriy"
                },
                "patronymic": {
                    "description": "Отчество пользователя",
                    "type": "string",
                    "example": "Vasilevich"
                },
                "surname": {
                    "description": "Фамилия пользователя",
                    "type": "string",
                    "example": "Ushakov"
                },
                "uuid": {
                    "description": "ID пользователя",
                    "type": "string",
                    "example": "8d571787-9981-4add-a713-2fde6236e84b"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Effective Mobile API",
	Description:      "Тестовое задание на GO для Effective Mobile.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
